{"version":3,"sources":["constants.js","reducers.js","components/Photo.js","components/PhotoContainer.js","actions.js","containers/App.js","reportWebVitals.js","index.js"],"names":["REQUEST_IMAGE_PENDING","REQUEST_IMAGE_SUCCESS","REQUEST_IMAGE_FAILED","IMAGE_LOADED_SUCCESS","IMAGE_LOADED_PENDING","initialStateImage","isPending","imageData","imageLoaded","error","Photo","imageSrc","photoLoaded","className","src","alt","onLoad","PhotoContainer","photos","imageRequest","tweetImage","roverName","cameraName","earthDate","undefined","length","photo","Math","floor","random","img_src","rover","name","camera","full_name","earth_date","id","onClick","getRoverData","dispatch","a","type","fetch","then","response","json","data","payload","results","catch","tweetClick","imageDetails","twitterUrl","trim","window","open","App","this","props","onRequestImage","onImageLoadedSuccess","onImageLoadedPending","whenLoaded","Date","Component","connect","state","requestImage","setImageLoaded","eventArgs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.860ec0ec.chunk.js","sourcesContent":["export const REQUEST_IMAGE_PENDING = 'REQUEST_IMAGE_PENDING';\nexport const REQUEST_IMAGE_SUCCESS = 'REQUEST_IMAGE_SUCCESS';\nexport const REQUEST_IMAGE_FAILED = 'REQUEST_IMAGE_FAILED';\nexport const IMAGE_LOADED_SUCCESS = 'IMAGE_LOADED_SUCCESS';\nexport const IMAGE_LOADED_PENDING = 'IMAGE_LOADED_PENDING';\nexport const TWEET_CLICKED = 'TWEET_CLICKED';","import {\n    REQUEST_IMAGE_PENDING,\n    REQUEST_IMAGE_SUCCESS,\n    REQUEST_IMAGE_FAILED,\n    IMAGE_LOADED_SUCCESS,\n    IMAGE_LOADED_PENDING\n} from './constants.js';\n\nconst initialStateImage = {\n    isPending: false,\n    imageData: '',\n    imageLoaded: false,\n    error: ''\n}\n\nexport const requestImage = ( state = initialStateImage, action = {} ) => {\n\n    switch ( action.type ) {\n        case REQUEST_IMAGE_PENDING:\n            return Object.assign( {}, state, { isPending: true } );\n        case REQUEST_IMAGE_SUCCESS:\n            return Object.assign( {}, state, { isPending: false, imageData: action.payload } );\n        case REQUEST_IMAGE_FAILED:\n            return Object.assign( {}, state, { isPending: false, error: action.payload } );\n        default:\n            return state;\n    }\n}\n\nexport const setImageLoaded = ( state = initialStateImage, action = {} ) => {\n\n    switch ( action.type ) {\n        case IMAGE_LOADED_PENDING:\n            return Object.assign( {}, state, { imageLoaded: false } );\n        case IMAGE_LOADED_SUCCESS:\n            return Object.assign( {}, state, { imageLoaded: true } );\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport '../styles/PhotoContainer.css';\n\nconst Photo = ({ imageSrc, photoLoaded }) => {\n\n    return (\n        <>\n            <div className='photo'>\n                <img \n                    src={ imageSrc }\n                    alt='Mars'\n                    onLoad={ () => photoLoaded }>\n                </img>\n            </div>\n        </>\n    );\n}\n\nexport default Photo;","import React from 'react';\nimport '../styles/PhotoContainer.css';\nimport Photo from './Photo';\n\nconst PhotoContainer = ({ imageData, imageRequest, photoLoaded, tweetImage }) => {\n\n    let imageSrc = '',\n        roverName = '',\n        cameraName = '',\n        earthDate = '';\n\n    const getRandomRoverPhoto = ( photos ) => {\n\n        return photos[ Math.floor( Math.random() * photos.length )];\n    }\n\n    if(imageData !== undefined && imageData.photos !== undefined && imageData.photos.length > 0) {\n\n        const photo = imageData.photos.length > 1 ? getRandomRoverPhoto( imageData.photos ) : imageData.photos[0];\n\n        imageSrc = photo.img_src;\n        roverName = photo.rover.name;\n        cameraName = photo.camera.full_name;\n        earthDate = photo.earth_date;\n    }\n\n    return imageData === \"\" || imageData === undefined ?\n        <div className=\"loader center\">\n            <h1>Loading</h1>\n            <i className=\"fas fa-satellite-dish fa-5x\" />\n        </div> :\n    (\n        <>\n            <div className='photo-container' id='photo-container'>\n\n                <Photo imageSrc={ imageSrc } photoLoaded={ photoLoaded }/>\n\n                <div className='rover-name'>\n                    <i className=\"fas fa-robot\"></i>&nbsp;\n                    <span id='rover-name'>{ roverName }</span>\n                </div>\n\n                <div className='camera-name'>\n                    <i className=\"fas fa-video\"></i>&nbsp;\n                    <span id='camera-name'>{ cameraName }</span>\n                </div>\n\n                <div className='earth-date'>\n                    <i className=\"far fa-calendar-alt\"></i>&nbsp;\n                    <span id='earth-date'>{ earthDate }</span>\n                </div>\n                \n                <div className='button-container'>\n                    <button \n                        className='twitter-button'\n                        id='twitter'\n                        onClick={ () => tweetImage([ imageSrc, roverName, cameraName, earthDate ])}>\n                        <i className='fab fa-twitter'></i>\n                    </button>\n                    <button \n                        id='new-photo'\n                        onClick={ imageRequest }>\n                        New Photo\n                    </button>\n                </div>\n\n            </div>\n        </>\n    );\n}\n\nexport default PhotoContainer;","import {\n    REQUEST_IMAGE_PENDING,\n    REQUEST_IMAGE_SUCCESS,\n    REQUEST_IMAGE_FAILED,\n    IMAGE_LOADED_PENDING,\n    IMAGE_LOADED_SUCCESS\n} from './constants.js';\n\n// Using redux-thunk middleware\nexport const requestImage = () => ( dispatch, eventArgs ) => {\n    return getRoverData( dispatch );\n}\n\nconst getRoverData = async ( dispatch ) => {\n    dispatch({ type: REQUEST_IMAGE_PENDING });\n    await fetch( `https://nasa-rover-images.herokuapp.com/api/search` )\n        .then( response => response.json() )\n        .then( data => dispatch({ type: REQUEST_IMAGE_SUCCESS, payload: data.results }))\n        .catch( error => dispatch({ type: REQUEST_IMAGE_FAILED, payload: error }))   \n};\n\nexport const imageLoadedSuccess = () => ( dispatch, eventArgs ) => {\n    return dispatch({ type: IMAGE_LOADED_SUCCESS });\n}\n\nexport const imageLoadedPending = () => ( dispatch, eventArgs ) => {\n    return dispatch({ type: IMAGE_LOADED_PENDING });\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport PhotoContainer from '../components/PhotoContainer';\nimport { requestImage, imageLoadedSuccess, imageLoadedPending } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    imageData: state.requestImage.imageData,\n    isPending: state.requestImage.isPending,\n    error: state.requestImage.error,\n    imageLoaded: state.setImageLoaded.imageLoaded,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onRequestImage: () => dispatch( requestImage() ),\n    onImageLoadedSuccess: () => dispatch( imageLoadedSuccess() ),\n    onImageLoadedPending: () => dispatch( imageLoadedPending() ),\n  }\n}\n\nconst tweetClick = ( imageDetails ) => {\n\n  const [ imageSrc, roverName, cameraName, earthDate ] = imageDetails;\n  const twitterUrl = `https://twitter.com/intent/tweet?text=Check%20out%20this%20Mars%20Rover%20photo!%0ARover:%20${roverName}%0ACamera:%20${cameraName}%0AEarth%20Date:%20${earthDate}%0A&url=${imageSrc}`.trim();\n\n  window.open(twitterUrl, '_blank');\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestImage();\n    this.props.onImageLoadedSuccess();\n    this.props.onImageLoadedPending();\n  }\n\n  render() {\n\n    const { \n      imageData, \n      isPending, \n      onRequestImage, \n      onImageLoadedSuccess, \n      onImageLoadedPending, \n      imageLoaded\n    } = this.props;\n    \n    let whenLoaded = new Date();\n\n    if(imageLoaded) {\n      whenLoaded = '';\n      onImageLoadedPending();\n    }\n\n    return isPending && whenLoaded ?\n      <div className=\"loader center\">\n          <div className=\"loading-text\">Loading Photo</div>\n          <br></br>\n          <i className=\"fa fa-cog fa-spin fa-5x\" />\n      </div> : \n      (\n        <div className=\"App\">\n          <PhotoContainer \n            imageData={ imageData }\n            imageRequest={ onRequestImage } \n            photoLoaded={ onImageLoadedSuccess } \n            tweetImage={ tweetClick }/>\n        </div>\n      )\n  }\n}\n\nexport default connect( mapStateToProps, mapDispatchToProps )( App );\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { requestImage, setImageLoaded } from './reducers';\nimport './styles/index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootReducers = combineReducers({ requestImage, setImageLoaded });\nconst store = createStore( rootReducers, applyMiddleware( thunkMiddleware ));\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}